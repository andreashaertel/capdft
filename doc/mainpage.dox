/** \mainpage Code library of the SophT group in Freiburg. 
 * 
 *  This documentation is generated automatically by doxygen. 
 *  For more information about Doxygen, please visit 
 *  [doxygen](http://www.doxygen.nl/index.html). 
 *
 *  \section intro_sec Introduction
 *
 *  capdft is a C++ code project of the 
 *  Statistical Physics of Soft Matter and Complex Systems 
 *  research group at the Institute of Physics in Freiburg, Germany. 
 * 
 *  The project contains the C++ library capdft. 
 *
 *  
 *  \section eq_example How to use equations
 * 
 *  \f$x+2\f$
 * 
 *  \f[
 *  m = e g a
 *  \f]
 * 
 *  \f{eqnarray}{
 *  m = e g a
 *  \f}
 * 
 *  https://www.doxygen.nl/manual/formulas.html
 * 
 *  Doxygen allows you to put \f$\mbox{\LaTeX}\f$ formulas in the output (this
 *  works only for the HTML, \f$\mbox{\LaTeX}\f$ and RTF output. To be able to include formulas (as images) in the HTML and RTF documentation, you will also need to have the following tools installed

    latex: the \f$\mbox{\LaTeX}\f$ compiler, needed to parse the formulas. To test I have used the teTeX 1.0 distribution.
    dvips: a tool to convert DVI files to PostScript files I have used version 5.92b from Radical Eye software for testing.
    gs: the GhostScript interpreter for converting PostScript files to bitmaps. I have used Aladdin GhostScript 8.0 for testing.

 * \section classes_overview capdft Project: Classes overview
 *
 * The capdft library contains tools for numerical cDFT calculations. It relies
 * heavily on classes that are shortly described in the following.
 *
 * Currently, the library supports only two different types of
 * geometries:
 *  - Cartesian: Two planar hard walls at distance \f$L\f$, where the density is
 *	evaluated only at the coordinate axis perpendicular to the walls.
 *  - Spherical: Two spheres with the same center but different radii
 *    \f$ r_{1} < r_{2} \f$, where the density is evaluated in the range 
 *    \f$ r_{1} < r_{2} \f$ in radial direction.
 *
 * Since each geometry requires adapted numerical threatment we decided to
 * split every functional in two versions: One which is written for cartesian
 * geometry and one that is optimised for spherical geometry. The functional
 * classes carry the corresponding geometry suffix in their name.
 *
 * Each functional is implemented as a class that that is derived from an
 * abstract class Functional, which contains the minimum
 * required functionalities each functional must own. (Change this sentence,
 * please). The naming convention for a functional class
 * Functional<specifier><geometric-suffix>:
 *  - "Functional": Each functional class carries this prefix in its name
 *  - <specifier>: Something that is unique for this functional, such that it is
 *  recognisible in a vast list of names
 *  - <geometric-suffix>: Cartesian/Spherical
 *  
 * Currently, there is only one type functional implemented for both geometries:
 *  - FunctionalFMTCartesian
 *  - FunctionalFMTSpherical
 *
 * Where FMT is an abbreviation for "Fundamental Measure Theory". We use FMT
 * exclusively for hard spheres. (Should we add other solids in a FMT
 * description our naming convention would not be unique anymore.)
 *
 *
 *  \section use_sec Use of the library
 *
 *  To use the library, you have to install the library on your system. 
 *  Clone from the repository in /home/Group/sophtlib to get a copy of the 
 *  library sources. Then run "make init" and "make" in your sophtlib directory 
 *  to build the library and header file. 
 *
 *  To include the functionality of sophtlib into your C++ codes, add the line <BR>
 *  <CODE>
 *  \#include "sophtlib.hpp" <BR>                                 
 *  </CODE>
 *  to your code. For compiling (not binding), you also have to tell the compiler where it 
 *  will find the header file include/sophtlib.hpp. For instance, to compile a program 
 *  main.cpp you can use the command <BR> 
 *  <CODE>
 *  g++ -c -I/path/to/sophtlib.hpp main.cpp <BR>
 *  </CODE>
 *  For binding (linking) your program, the linker has to know where it will find the 
 *  library bin/libHOSTNAME.sophtlib.a file and how it is called. In the above example, 
 *  you could call <BR>
 *  <CODE>
 *  g++ -o main -L/path/to/sophtlib.a -lXXX.sophtlib main.o <BR>
 *  </CODE>
 *  where HOSTNAME defines your computer's name (this allows you to use the same directories 
 *  on several computers with different architecture, which happens in our group due to the 
 *  remote home directory that is shared by all computers). <BR>
 *  Alternatively, you can add the path for the header and the library to your system 
 *  path variables, for instance using your <CODE>.bashrc</CODE> file. 
 *
 *  \section notes_sec Notes
 * 
 *  To exclude information about the private members of classes into this
 *  documentation, please set <CODE>EXTRACT_PRIVATE</CODE> to <CODE>NO</CODE> in the Doxyfile. 
 * 
 */

